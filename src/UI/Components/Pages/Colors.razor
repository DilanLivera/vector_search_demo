@page "/colors"
@rendermode InteractiveServer
@inject ColorCollection Collection
@inject CollectionInitializationStatusManager StatusManager
@using Qdrant.Client.Grpc
@using UI.Infrastructure.Collections
@using static Qdrant.Client.Grpc.Conditions
@using Range=Qdrant.Client.Grpc.Range

<PageTitle>Color Vector Collection</PageTitle>

<div class="max-w-4xl mx-auto p-1">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
            <span>Color Vector Collection</span>

            <span class="inline-flex items-center gap-0 border-2 border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden text-base font-small">
                <span class="px-1 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md">Loading:

                    @switch (_collectionInitializationInfo.Status)
                    {
                        case InitializationStatus.InProgress:
                            <span class="inline-flex items-center gap-2 px-1.5 py-1 bg-blue-500 text-white rounded-md">
                                <svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>@InitializationStatus.InProgress</span>
                            </span>

                            break;
                        case InitializationStatus.Completed:
                            <span class="inline-flex items-center gap-2 px-1.5 py-1 bg-green-500 text-white rounded-md">
                                <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                <span>@InitializationStatus.Completed</span>
                            </span>

                            break;
                        case InitializationStatus.Failed:
                            <span class="inline-flex items-center gap-2 px-1.5 py-1 bg-red-500 text-white rounded-md">
                                <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                <span>@InitializationStatus.Failed</span>
                            </span>

                            break;
                        default:
                            <span class="inline-flex items-center gap-2 px-1.5 py-1 bg-gray-400 text-white rounded-lg">
                                <span>@InitializationStatus.NotStarted</span>
                            </span>

                            break;
                    }
                </span>

            </span>
        </h1>

        <div class="mb-4 p-4 bg-green-50 dark:bg-green-700 rounded-lg">
            <p class="text-sm">
                This page demonstrates vector similarity search using Qdrant. Each vector has 1024 dimensions and includes metadata (color and random number). The color collection is created and seeded during startup.
            </p>
        </div>

        <hr class="h-px my-8 bg-gray-200 border-0 dark:bg-gray-700">

        <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Search Vectors
            </h3>
            <div class="mb-4 p-4 bg-green-50 dark:bg-green-700 rounded-lg">
                <p class="text-sm">
                    Enter a color to find the 5 most similar vectors in the collection. The search uses cosine similarity to measure how similar vectors are.
                </p>
            </div>
            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Color
                </label>
                <input class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       @bind="SearchVectorsColor"/>
                <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                    Enter a text value to search
                </p>
            </div>
            <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
                    @onclick="SearchVectorsAsync">
                Search
            </button>
        </div>

        <hr class="h-px my-8 bg-gray-200 border-0 dark:bg-gray-700">

        <div class="mb-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Filtered Search
            </h3>
            <div class="mb-4 p-4 bg-green-50 dark:bg-green-700 rounded-lg">
                <p class="text-sm">
                    Search for similar colors but only return those where the random number is greater than or equal to the specified value. This demonstrates how to combine vector similarity search with metadata filtering.
                </p>
            </div>
            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Color
                </label>
                <input class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       @bind="FilteredSearchColor"/>
                <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                    Enter a text value to search
                </p>
            </div>
            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                    Minimum Random Number
                </label>
                <input type="number"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       @bind="FilteredSearchMinRandomNumber"/>
                <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                    Enter a number between 0 and 9
                </p>
            </div>
            <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
                    @onclick="SearchWithFilterAsync">
                Search
            </button>
        </div>

        <hr class="h-px my-8 bg-gray-200 border-0 dark:bg-gray-700">

        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Search Results
            </h3>
            <div class="mb-4 p-4 bg-green-50 dark:bg-green-700 rounded-lg">
                <p class="text-sm">
                    Results show the 5 most similar vectors, ordered by similarity score (higher is more similar). Each result includes:
                </p>
                <ul class="mt-2 text-sm list-disc list-inside">
                    <li>ID: The unique identifier of the vector</li>
                    <li>Score: Similarity score (0-1, higher means more similar)</li>
                    <li>Color: Color Name</li>
                    <li>Random Number: A number between 0-9</li>
                </ul>
            </div>
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3">ID</th>
                    <th scope="col" class="px-6 py-3">Score</th>
                    <th scope="col" class="px-6 py-3">Color</th>
                    <th scope="col" class="px-6 py-3">Random Number</th>
                </tr>
                </thead>
                <tbody>
                @foreach (ScoredPoint result in SearchResults)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                        <td class="px-6 py-4">@result.Id</td>
                        <td class="px-6 py-4">@result.Score</td>
                        <td class="px-6 py-4">@result.Payload["color"]</td>
                        <td class="px-6 py-4">@result.Payload["rand_number"]</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private string SearchVectorsColor { get; set; } = "Red";
    private string FilteredSearchColor { get; set; } = "Yellow";
    private int FilteredSearchMinRandomNumber { get; set; } = 3;
    private IReadOnlyList<ScoredPoint> SearchResults { get; set; } = [];

    private CollectionInitializationInfo _collectionInitializationInfo = new(nameof(ColorCollection)); // this is initialized to avoid the null warning

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _collectionInitializationInfo = StatusManager.GetCollectionInitializationInfo(nameof(ColorCollection));

        StatusManager.CollectionStatusChanged += OnCollectionStatusChanged;
    }

    private void OnCollectionStatusChanged(object? sender, CollectionInitializationInfo info)
    {
        InvokeAsync(() =>
        {
            _collectionInitializationInfo = info;
            StateHasChanged();
        });
    }

    private async Task SearchVectorsAsync()
    {
        SearchResults = await Collection.SearchAsync(SearchVectorsColor);
    }

    private async Task SearchWithFilterAsync()
    {
        Condition condition = new()
                              {
                                  Filter = Range(field: "rand_number", new Range { Gte = FilteredSearchMinRandomNumber })
                              };

        SearchResults = await Collection.SearchAsync(FilteredSearchColor, condition);
    }
}
