@page "/"
@page "/colors_v2"
@rendermode InteractiveServer
@inject ColorCollection Collection
@inject CollectionInitializationStatusManager StatusManager
@using System.Diagnostics
@using Qdrant.Client.Grpc
@using UI.Infrastructure.Collections
@using static Qdrant.Client.Grpc.Conditions
@using Range=Qdrant.Client.Grpc.Range

<PageTitle>Color Collection</PageTitle>

<style>
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-out;
    }
</style>

<div class="relative bg-gradient-to-b from-blue-700 via-blue-600 to-blue-500 overflow-hidden transition-all duration-500 flex flex-col" style="min-height: calc(100vh - 5rem);">
    <FloatingRocks/>

    <!-- Hero Content - moves up when results appear -->
    <div class="relative z-10 text-center text-white px-8 @(SearchResults.Count > 0 ? "pt-8" : "pt-[15vh]") transition-all duration-500">
        <h1 class="@(SearchResults.Count > 0 ? "text-5xl mb-4" : "text-7xl mb-12") italic font-light drop-shadow-lg tracking-wide transition-all duration-500" style="font-family: Georgia, serif;">
            Color Collection
        </h1>

        <!-- Status Badge -->
        <StatusBadge Status="_collectionInitializationInfo.Status" Compact="@(SearchResults.Count > 0)"/>

        <!-- Search Input -->
        <div class="max-w-2xl mx-auto @(SearchResults.Count > 0 ? "mb-4" : "mb-8")">
            <div class="relative">
                <input type="text"
                       class="w-full py-5 pl-8 pr-20 rounded-full border-2 border-white/30 bg-white/15 backdrop-blur-md text-white text-lg placeholder-white/70 focus:outline-none focus:bg-white/25 focus:border-white/50 transition-all"
                       placeholder="Enter a color"
                       @bind="SearchVectorsColor"/>
                <button class="absolute right-2 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-white flex items-center justify-center hover:scale-110 transition-transform shadow-lg"
                        @onclick="SearchVectorsAsync">
                    <svg class="w-5 h-5 stroke-blue-700 stroke-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Content Area - Either Subtitle or Results -->
    <div class="relative z-10 flex-1 flex items-center justify-center px-8 pb-8">
        @if (SearchResults.Count == 0)
        {
            <!-- Subtitle -->
            <p class="text-xl leading-relaxed drop-shadow-md max-w-3xl text-white text-center transition-all duration-500">
                This page demonstrates semantic search using Qdrant and 'mxbai-embed-large' model. Each vector has 1024 dimensions and includes metadata (color and random number). The color collection is created and seeded during startup. Please enter a text to find the 5 most similar vectors in the collection. The search uses cosine similarity to measure how similar vectors are.
            </p>
        }
        else
        {
            <!-- Results Section -->
            <div class="w-full max-w-6xl animate-fade-in">
                <h2 class="text-3xl font-bold text-white mb-4 text-center">Search Results</h2>
                <p class="text-white/90 mb-6 leading-relaxed text-center">
                    Results show the 5 most similar vectors, ordered by similarity score (higher is more similar).
                </p>

                <div class="overflow-hidden rounded-xl shadow-2xl border-2 border-white/30 bg-white/15 backdrop-blur-md">
                    <table class="w-full">
                        <thead class="border-b-2 border-white/30">
                        <tr>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">ID</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Score</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Color</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Random Number</th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-white/20">
                        @foreach (ScoredPoint result in SearchResults)
                        {
                            <tr class="hover:bg-white/10 transition-colors">
                                <td class="px-6 py-4 text-white">@result.Id</td>
                                <td class="px-6 py-4 text-white">@result.Score.ToString("F4")</td>
                                <td class="px-6 py-4 text-white">@result.Payload["color"]</td>
                                <td class="px-6 py-4 text-white">@result.Payload["rand_number"]</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string SearchVectorsColor { get; set; } = "Grass";
    private string FilteredSearchColor { get; set; } = "Sky";
    private int FilteredSearchMinRandomNumber { get; set; } = 3;
    private IReadOnlyList<ScoredPoint> SearchResults { get; set; } = [];

    private CollectionInitializationInfo _collectionInitializationInfo = new(nameof(ColorCollection)); // this is initialized to avoid the null warning

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _collectionInitializationInfo = StatusManager.GetCollectionInitializationInfo(nameof(ColorCollection));

        StatusManager.CollectionStatusChanged += OnCollectionStatusChanged;
    }

    private void OnCollectionStatusChanged(object? sender, CollectionInitializationInfo info)
    {
        if (!info.CollectionName.Equals(_collectionInitializationInfo.CollectionName))
        {
            return;
        }

        InvokeAsync(() => {
            _collectionInitializationInfo = info;
            StateHasChanged();
        });
    }

    private async Task SearchVectorsAsync()
    {
        using (Activity? activity = OtelHelpers.ActivitySource.StartActivity(name: OtelHelpers.ActivityNames.ColorSearchVectorsMessage))
        {
            if (activity is not null && activity.IsAllDataRequested)
            {
                activity.SetTag("input", SearchVectorsColor);
            }

            Result<IReadOnlyList<ScoredPoint>> searchResult = await Collection.SearchAsync(SearchVectorsColor);

            if (searchResult.IsFailure)
            {
                // show error message
                return;
            }

            SearchResults = searchResult.Value;
        }
    }

    private async Task SearchWithFilterAsync()
    {
        Condition condition = new()
                              {
                                  Filter = Range(field: "rand_number", new Range { Gte = FilteredSearchMinRandomNumber })
                              };

        Result<IReadOnlyList<ScoredPoint>> searchResult = await Collection.SearchAsync(FilteredSearchColor, condition);

        if (searchResult.IsFailure)
        {
            // show error message
            return;
        }

        SearchResults = searchResult.Value;
    }

}
