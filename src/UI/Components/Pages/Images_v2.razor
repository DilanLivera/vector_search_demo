@page "/images_v2"
@rendermode InteractiveServer
@inject ImageCollection Collection
@inject CollectionInitializationStatusManager StatusManager
@using System.Diagnostics
@using Qdrant.Client.Grpc
@using UI.Infrastructure.Collections.Images
@using static Qdrant.Client.Grpc.Conditions

<PageTitle>Image Vector Collection</PageTitle>

<style>
    @@keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }
        50% {
            transform: translateY(-30px) rotate(5deg);
        }
    }

    .animate-float {
        animation: float 20s ease-in-out infinite;
    }

    .animate-float-delay-1 {
        animation-delay: -5s;
    }

    .animate-float-delay-2 {
        animation-delay: -10s;
    }

    .animate-float-delay-3 {
        animation-delay: -15s;
    }

    .animate-float-delay-4 {
        animation-delay: -7s;
    }

    .animate-float-delay-5 {
        animation-delay: -12s;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-out;
    }
</style>

<div class="relative bg-gradient-to-b from-blue-700 via-blue-600 to-blue-500 overflow-hidden transition-all duration-500 flex flex-col" style="min-height: calc(100vh - 5rem);">
    <!-- Floating Rocks -->
    <div class="absolute w-48 h-44 top-[5%] left-[10%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float"></div>
    <div class="absolute w-36 h-32 top-[15%] right-[15%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float animate-float-delay-1"></div>
    <div class="absolute w-44 h-40 bottom-[20%] left-[5%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float animate-float-delay-2"></div>
    <div class="absolute w-40 h-36 bottom-[10%] right-[10%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float animate-float-delay-3"></div>
    <div class="absolute w-32 h-28 top-[40%] left-[20%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float animate-float-delay-4"></div>
    <div class="absolute w-36 h-32 top-[50%] right-[25%] bg-gradient-to-br from-amber-700 via-amber-600 to-amber-800 rounded-[50%_40%_45%_55%] shadow-2xl animate-float animate-float-delay-5"></div>

    <!-- Hero Content - moves up when results appear -->
    <div class="relative z-10 text-center text-white px-8 @(SearchResults.Count > 0 ? "pt-8" : "pt-[15vh]") transition-all duration-500">
        <h1 class="@(SearchResults.Count > 0 ? "text-5xl mb-4" : "text-7xl mb-12") italic font-light drop-shadow-lg tracking-wide transition-all duration-500" style="font-family: Georgia, serif;">
            Image Vector Collection
        </h1>

        <!-- Status Badge -->
        <StatusBadge Status="_collectionInitializationInfo.Status" Compact="@(SearchResults.Count > 0)"/>

        <!-- Search Input -->
        <div class="max-w-2xl mx-auto @(SearchResults.Count > 0 ? "mb-4" : "mb-8")">
            <div class="relative">
                <input type="text"
                       class="w-full py-5 pl-8 pr-20 rounded-full border-2 border-white/30 bg-white/15 backdrop-blur-md text-white text-lg placeholder-white/70 focus:outline-none focus:bg-white/25 focus:border-white/50 transition-all"
                       placeholder="Enter a text value to search"
                       @bind="SearchText"/>
                <button class="absolute right-2 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-white flex items-center justify-center hover:scale-110 transition-transform shadow-lg"
                        @onclick="SearchAsync">
                    <svg class="w-5 h-5 stroke-blue-700 stroke-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Content Area - Either Subtitle or Results -->
    <div class="relative z-10 flex-1 flex items-center justify-center px-8 pb-8">
        @if (SearchResults.Count == 0)
        {
            <!-- Subtitle -->
            <p class="text-xl leading-relaxed drop-shadow-md max-w-3xl text-white text-center transition-all duration-500">
                This page demonstrates semantic search using Qdrant and 'Cohere-embed-v3-english' model. Each vector has 1024 dimensions and includes metadata (base64 image, image name, format and created datetime). The image collection is created and seeded during startup. Please enter a text to find the 5 most similar vectors in the collection. The search uses cosine similarity to measure how similar vectors are.
            </p>
        }
        else
        {
            <!-- Results Section -->
            <div class="w-full max-w-6xl animate-fade-in">
                <h2 class="text-3xl font-bold text-white mb-4 text-center">Search Results</h2>
                <p class="text-white/90 mb-6 leading-relaxed text-center">
                    Results show the 5 most similar vectors, ordered by similarity score (higher is more similar).
                </p>

                <div class="overflow-hidden rounded-xl shadow-2xl border-2 border-white/30 bg-white/15 backdrop-blur-md">
                    <table class="w-full">
                        <thead class="border-b-2 border-white/30">
                        <tr>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">ID</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Score</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Image</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold uppercase tracking-wider text-white">Image Name</th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-white/20">
                        @foreach (ScoredPoint result in SearchResults)
                        {
                            <tr class="hover:bg-white/10 transition-colors">
                                <td class="px-6 py-4 text-white">@result.Id.Uuid</td>
                                <td class="px-6 py-4 text-white">@result.Score</td>
                                <td class="px-6 py-4 text-white"><img src="@GetImageDataUri(result.Payload["image_in_base64_string"].StringValue, result.Payload["image_name"].StringValue)"
                                                                      alt="@result.Payload["image_name"].StringValue"
                                                                      class="max-w-32 max-h-32 object-contain"/></td>
                                <td class="px-6 py-4 text-white">@result.Payload["image_name"].StringValue</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string SearchText { get; set; } = "flying objects";
    private string FilteredSearchText { get; set; } = "bird";
    private string FilteredSearchImageName { get; set; } = "parrot";
    private IReadOnlyList<ScoredPoint> SearchResults { get; set; } = [];

    private CollectionInitializationInfo _collectionInitializationInfo = new(nameof(ImageCollection));

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _collectionInitializationInfo = StatusManager.GetCollectionInitializationInfo(nameof(ImageCollection));

        StatusManager.CollectionStatusChanged += OnCollectionStatusChanged;
    }

    private void OnCollectionStatusChanged(object? sender, CollectionInitializationInfo info)
    {
        if (!info.CollectionName.Equals(_collectionInitializationInfo.CollectionName))
        {
            return;
        }

        InvokeAsync(() => {
            _collectionInitializationInfo = info;
            StateHasChanged();
        });
    }

    private async Task SearchAsync()
    {
        using (Activity? activity = OtelHelpers.ActivitySource.StartActivity(name: OtelHelpers.ActivityNames.ImageSearchVectorsMessage))
        {
            SearchResults = await Collection.SearchAsync(SearchText);
        }
    }

    private async Task SearchWithFilterAsync()
    {
        Condition condition = new()
                              {
                                  Filter = MatchText(field: "image_name", text: FilteredSearchImageName)
                              };

        SearchResults = await Collection.SearchAsync(FilteredSearchText, condition);
    }

    private string GetImageDataUri(string imageInBase64String, string imageName)
    {
        string extension = Path.GetExtension(imageName).ToLower();
        string mimeType = extension switch
        {
            ".png" => "image/png",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".gif" => "image/gif",
            ".webp" => "image/webp",
            _ => "image/jpeg"
        };

        return $"data:{mimeType};base64,{imageInBase64String}";
    }
}
